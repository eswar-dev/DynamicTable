import React, { useState, useEffect } from "react";
import Paper from "@mui/material/Paper";
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import TableHead from "@mui/material/TableHead";
import TablePagination from "@mui/material/TablePagination";
import TableRow from "@mui/material/TableRow";
import {
  Select,
  InputLabel,
  MenuItem,
  Grid,
  FormControl,
  Button,
} from "@mui/material";
import axios from "axios";

// Update the columns array to use dynamic month names
const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
const columns = [
  ...months.map((month) => ({
    id: month.toLowerCase(),
    label: month,
    minWidth: 170,
    align: "right",
    format: (value) => value.toFixed(2),
  })),
];

function createData(monthsData) {
  return monthsData.reduce((acc, month) => {
    acc[month.toLowerCase()] = month.Qty;
    return acc;
  }, {});
}

export default function StickyHeadTable() {
  const [page, setPage] = React.useState(0);
  const [rowsPerPage, setRowsPerPage] = React.useState(10);
  const [data, setData] = useState([]);
  const [file, setFile] = useState(null);
  const [rows, setRows] = useState([]);
  const [filters, setFilters] = useState({
    segmentLeadership: "All",
    status: "All",
    brand: "All",
  });

  const handleFileChange = (e) => {
    setFile(e.target.files[0]);
  };

  const uploadFile = async () => {
    const formData = new FormData();
    formData.append("file", file);

    try {
      await axios.post("http://localhost:5000/upload", formData);
      fetchData();
    } catch (error) {
      console.error("Error uploading file:", error);
    }
  };

  const fetchData = async () => {
    try {
      const response = await axios.get("http://localhost:5000/data", {
        params: filters,
      });
      setData(response.data);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  const handleFilterChange = (filterName, value) => {
    setFilters({
      ...filters,
      [filterName]: value,
    });
  };

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(+event.target.value);
    setPage(0);
  };

  const updateRows = (filteredData) => {
    // Map the fetched data to create rows with dynamic labels
    const updatedRows = filteredData.map((dataItem) => {
      // Create an object with dynamic month labels and Qty values
      const rowData = createData(dataItem.Month);
      return rowData;
    });

    // Set the updated rows
    setRows(updatedRows);
  };

  const options = ['Below 2k', 'Above 2k'];

  useEffect(() => {
    fetchData();
  }, [filters]);

  useEffect(() => {
    // Call updateRows when the data is fetched or filters change
    updateRows(data);
  }, [data, filters]);

  return (
    <Paper sx={{ width: "100%", overflow: "hidden", m: 2 }}>
      <Grid container gap={2} mt={2}>
        {/* ... Your filter components ... */}
      </Grid>

      <TableContainer sx={{ maxHeight: 440 }}>
        <Table stickyHeader aria-label="sticky table">
          <TableHead>
            <TableRow>
              {columns.map((column) => (
                <TableCell
                  key={column.id}
                  align={column.align}
                  style={{ minWidth: column.minWidth }}
                >
                  {column.label}
                </TableCell>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {rows
              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
              .map((row, index) => {
                return (
                  <TableRow key={index} hover role="checkbox" tabIndex={-1}>
                    {columns.map((column) => (
                      <TableCell key={column.id} align={column.align}>
                        {column.format && typeof row[column.id] === "number"
                          ? column.format(row[column.id])
                          : row[column.id]}
                      </TableCell>
                    ))}
                  </TableRow>
                );
              })}
          </TableBody>
        </Table>
      </TableContainer>
      <TablePagination
        rowsPerPageOptions={[10, 25, 100]}
        component="div"
        count={rows.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
      />
    </Paper>
  );
}
